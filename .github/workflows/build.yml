name: Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_wheel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Install dependencies
        run: |
          uv sync --extra dev
      - name: Create wheel
        run: |
          uv build
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: cyber_query_ai
          path: dist/cyber_query_ai-*-py3-none-any.whl
  create_installer:
    runs-on: ubuntu-latest
    needs: build_wheel
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: cyber_query_ai
      - name: Prepare release directory
        run: |
          PACKAGE_NAME="cyber_query_ai"
          WHEEL_FILE=$(find . -name "${PACKAGE_NAME}-*-py3-none-any.whl")
          PACKAGE_VERSION=$(echo "$WHEEL_FILE" | sed -n "s/.*${PACKAGE_NAME}-\(.*\)-py3-none-any\.whl/\1/p")

          mv "$WHEEL_FILE" "release/$(basename "$WHEEL_FILE")"
          chmod +x release/install_cyber_query_ai.sh
          mv release ${PACKAGE_NAME}_${PACKAGE_VERSION}

          tree ${PACKAGE_NAME}_${PACKAGE_VERSION} --dirsfirst -F
      - name: Create release tarball
        run: |
          PACKAGE_NAME="cyber_query_ai"
          WHEEL_FILE=$(find . -name "${PACKAGE_NAME}-*-py3-none-any.whl")
          PACKAGE_VERSION=$(echo "$WHEEL_FILE" | sed -n "s/.*${PACKAGE_NAME}-\(.*\)-py3-none-any\.whl/\1/p")
          tar -czf ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz ${PACKAGE_NAME}_${PACKAGE_VERSION}
      - name: Upload release tarball
        uses: actions/upload-artifact@v4
        with:
          name: cyber_query_ai_release
          path: cyber_query_ai_*.tar.gz
  check_installer:
    runs-on: ubuntu-latest
    needs: create_installer
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Download artifact from create_installer job
        uses: actions/download-artifact@v4
        with:
          name: cyber_query_ai_release
      - name: Extract release tarball
        run: |
          TAR_FILE=$(find . -name 'cyber_query_ai_*.tar.gz')
          tar -xzf $TAR_FILE
      - name: Run installer script
        run: |
          TAR_FILE=$(find . -name 'cyber_query_ai_*.tar.gz')
          DIR_NAME=$(basename "$TAR_FILE" .tar.gz)
          cd "$DIR_NAME"
          ./install_cyber_query_ai.sh

          echo "$DIR_NAME/"
          tree --dirsfirst -F

          if [ -f "install_cyber_query_ai.sh" ]; then
            echo "Installer script not removed"
            exit 1
          fi

          if [ ! -d ".venv" ]; then
            echo "Virtual environment not found"
            exit 1
          fi

          if [ ! -d "service" ]; then
            echo "Service directory not found"
            exit 1
          fi

          if [ ! -f "cyber-query-ai" ]; then
            echo "Executable 'cyber-query-ai' not found"
            exit 1
          fi

          if [ ! -f "service/start_service.sh" ]; then
            echo "Executable 'service/start_service.sh' not found"
            exit 1
          fi

          if [ ! -f "service/stop_service.sh" ]; then
            echo "Executable 'service/stop_service.sh' not found"
            exit 1
          fi

          if [ ! -f "uninstall_cyber_query_ai.sh" ]; then
            echo "Uninstallation file not found"
            exit 1
          fi

          if [ ! -f "README.txt" ]; then
            echo "README file not found"
            exit 1
          fi
