name: Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_wheel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Install dependencies
        run: |
          uv sync --extra dev
      - name: Create wheel
        run: |
          uv build
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: cyber_query_ai_wheel
          path: dist/cyber_query_ai-*-py3-none-any.whl

  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "cyber-query-ai-frontend/package-lock.json"
      - name: Install frontend dependencies
        run: |
          cd cyber-query-ai-frontend
          npm ci
      - name: Build frontend
        run: |
          cd cyber-query-ai-frontend
          npm run build
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: cyber_query_ai_frontend
          path: cyber-query-ai-frontend/out

  create_installer:
    runs-on: ubuntu-latest
    needs: [build_wheel, build_frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: cyber_query_ai_wheel
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: cyber_query_ai_frontend
          path: static
      - name: Prepare release directory
        run: |
          PACKAGE_NAME="cyber_query_ai"
          WHEEL_FILE=$(find . -name "${PACKAGE_NAME}-*-py3-none-any.whl")
          PACKAGE_VERSION=$(echo "$WHEEL_FILE" | sed -n "s/.*${PACKAGE_NAME}-\(.*\)-py3-none-any\.whl/\1/p")

          mv "$WHEEL_FILE" release/
          mv static release/
          chmod +x release/install_cyber_query_ai.sh
          mv release ${PACKAGE_NAME}_${PACKAGE_VERSION}

          tree ${PACKAGE_NAME}_${PACKAGE_VERSION} --dirsfirst -F
      - name: Create release tarball
        run: |
          PACKAGE_NAME="cyber_query_ai"
          WHEEL_FILE=$(find . -name "${PACKAGE_NAME}-*-py3-none-any.whl")
          PACKAGE_VERSION=$(echo "$WHEEL_FILE" | sed -n "s/.*${PACKAGE_NAME}-\(.*\)-py3-none-any\.whl/\1/p")
          tar -czf ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz ${PACKAGE_NAME}_${PACKAGE_VERSION}
      - name: Upload release tarball
        uses: actions/upload-artifact@v4
        with:
          name: cyber_query_ai_release
          path: cyber_query_ai_*.tar.gz
  check_installer:
    runs-on: ubuntu-latest
    needs: create_installer
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Download artifact from create_installer job
        uses: actions/download-artifact@v4
        with:
          name: cyber_query_ai_release
      - name: Extract release tarball
        run: |
          TAR_FILE=$(find . -name 'cyber_query_ai_*.tar.gz')
          tar -xzf $TAR_FILE
      - name: Run installer script
        run: |
          TAR_FILE=$(find . -name 'cyber_query_ai_*.tar.gz')
          DIR_NAME=$(basename "$TAR_FILE" .tar.gz)
          cd "$DIR_NAME"
          ./install_cyber_query_ai.sh

          echo "$DIR_NAME/"
          tree --dirsfirst -F

          if [ -f "install_cyber_query_ai.sh" ]; then
            echo "Installer script not removed"
            exit 1
          fi

          if [ -f "install_cyber_query_ai.bat" ]; then
            echo "Windows installer script not removed"
            exit 1
          fi

          if [ -f "readme.txt" ]; then
            echo "Installation README file not removed"
            exit 1
          fi

          if [ ! -d ".venv" ]; then
            echo "Virtual environment not found"
            exit 1
          fi

          if [ ! -d "static" ]; then
            echo "Static directory not found"
            exit 1
          fi

          if [ ! -d "service" ]; then
            echo "Service directory not found"
            exit 1
          fi

          if [ ! -f "service/start_service.sh" ]; then
            echo "Executable 'service/start_service.sh' not found"
            exit 1
          fi

          if [ ! -f "service/stop_service.sh" ]; then
            echo "Executable 'service/stop_service.sh' not found"
            exit 1
          fi

          if [ ! -f "config.json" ]; then
            echo "Config file not found"
            exit 1
          fi

          if [ ! -f "README.md" ]; then
            echo "README file not found"
            exit 1
          fi

          if [ ! -f "SECURITY.md" ]; then
            echo "SECURITY file not found"
            exit 1
          fi

          if [ ! -f "LICENSE" ]; then
            echo "LICENSE file not found"
            exit 1
          fi

          if [ ! -f "cyber-query-ai" ]; then
            echo "Executable 'cyber-query-ai' not found"
            exit 1
          fi

          if [ ! -f "uninstall_cyber_query_ai.sh" ]; then
            echo "Uninstallation file not found"
            exit 1
          fi

  create_release:
    runs-on: ubuntu-latest
    needs: check_installer
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          uv sync --extra dev
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.get_version.outputs.version }} already exists, skipping release creation"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Download release tarball
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: actions/download-artifact@v4
        with:
          name: cyber_query_ai_release
      - name: Generate release notes
        if: steps.check_tag.outputs.tag_exists == 'false'
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## CyberQueryAI v${{ steps.get_version.outputs.version }}

          **AI-powered cybersecurity assistant for ethical hacking and penetration testing**

          ### Quick Start

          1. Download and extract the tarball: `tar -xzf cyber_query_ai_${{ steps.get_version.outputs.version }}.tar.gz`
          2. Run the installer: `./install_cyber_query_ai.sh` (Linux/macOS) or `install_cyber_query_ai.bat` (Windows)
          3. Install Ollama from [ollama.ai](https://ollama.ai/) and pull models: `ollama pull mistral && ollama pull bge-m3`
          4. Launch the app: `./cyber-query-ai` (Linux/macOS) or `cyber-query-ai.bat` (Windows)
          5. Open your browser: `http://localhost:8000`

          ### Features

          - **Conversational AI Assistant** with full chat history and context awareness
          - **Code Generation** for security commands and scripts (Python, Bash, PowerShell, etc.)
          - **Code Analysis** with detailed explanations and security risk assessment
          - **Exploit Research** for CVEs and attack vectors
          - **Built-in Security** with input/output sanitization and rate limiting

          ### Requirements

          - uv package manager
          - Python 3.12+
          - Ollama with `mistral` and `bge-m3` models

          ### Documentation

          - [Getting Started](https://github.com/javidahmed64592/cyber-query-ai#getting-started)
          - [API Docs](https://github.com/javidahmed64592/cyber-query-ai/blob/main/docs/API.md)
          - [Architecture](https://github.com/javidahmed64592/cyber-query-ai/blob/main/docs/ARCHITECTURE.md)
          - See `readme.txt` in the release for detailed installation instructions

          **⚠️ Ethical Use Only**: For authorized penetration testing and educational purposes. Always verify AI-generated commands before execution.
          EOF
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: "CyberQueryAI ${{ steps.get_version.outputs.version }}"
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          files: |
            cyber_query_ai_${{ steps.get_version.outputs.version }}.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: false
