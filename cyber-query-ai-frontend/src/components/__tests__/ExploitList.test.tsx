import { render, screen } from "@testing-library/react";

import { Exploit } from "../../lib/types";
import ExploitList from "../ExploitList";

describe("ExploitList", () => {
  const mockExploits: Exploit[] = [
    {
      title: "CVE-2021-44228 Log4j RCE",
      link: "https://nvd.nist.gov/vuln/detail/CVE-2021-44228",
      severity: "critical",
      explanation: "Remote code execution vulnerability in Log4j library.",
    },
    {
      title: "CVE-2020-1472 Zerologon",
      link: "https://nvd.nist.gov/vuln/detail/CVE-2020-1472",
      severity: "high",
      explanation: "Privilege escalation vulnerability in Windows Netlogon.",
    },
    {
      title: "CVE-2019-0708 BlueKeep",
      link: "https://nvd.nist.gov/vuln/detail/CVE-2019-0708",
      severity: "medium",
      explanation: "RDP vulnerability allowing remote code execution.",
    },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("shows loading state when isLoading=true", () => {
    render(<ExploitList exploits={[]} isLoading={true} />);

    expect(screen.getByText("ðŸ“Ž Exploit References:")).toBeInTheDocument();
    expect(screen.getByText("Searching for exploits...")).toBeInTheDocument();
  });

  it("shows empty state when no exploits and not loading", () => {
    render(<ExploitList exploits={[]} isLoading={false} />);

    expect(screen.getByText("ðŸ“Ž Exploit References:")).toBeInTheDocument();
    expect(
      screen.getByText("No known exploits found for this target.")
    ).toBeInTheDocument();
  });

  it("displays exploit list when exploits are provided", () => {
    render(<ExploitList exploits={mockExploits} isLoading={false} />);

    expect(screen.getByText("ðŸ“Ž Exploit References:")).toBeInTheDocument();

    // Check that all exploit titles are displayed
    mockExploits.forEach(exploit => {
      expect(screen.getByText(exploit.title)).toBeInTheDocument();
      expect(screen.getByText(exploit.explanation)).toBeInTheDocument();
    });
  });

  it("displays severity badges with correct styling", () => {
    render(<ExploitList exploits={mockExploits} isLoading={false} />);

    expect(screen.getByText("CRITICAL")).toBeInTheDocument();
    expect(screen.getByText("HIGH")).toBeInTheDocument();
    expect(screen.getByText("MEDIUM")).toBeInTheDocument();

    // Check severity color classes
    const criticalBadge = screen.getByText("CRITICAL");
    expect(criticalBadge).toHaveClass("text-red-500", "border-red-500");

    const highBadge = screen.getByText("HIGH");
    expect(highBadge).toHaveClass("text-orange-500", "border-orange-500");

    const mediumBadge = screen.getByText("MEDIUM");
    expect(mediumBadge).toHaveClass("text-yellow-500", "border-yellow-500");
  });

  it("displays external links correctly", () => {
    render(<ExploitList exploits={mockExploits} isLoading={false} />);

    const links = screen.getAllByText("ðŸ”— View Details");
    expect(links).toHaveLength(mockExploits.length);

    links.forEach((link, index) => {
      const exploit = mockExploits[index];
      if (exploit?.link) {
        expect(link).toHaveAttribute("href", exploit.link);
        expect(link).toHaveAttribute("target", "_blank");
        expect(link).toHaveAttribute("rel", "noopener noreferrer");
      }
    });
  });

  it("handles exploits without links", () => {
    const exploitsWithoutLinks: Exploit[] = [
      {
        title: "Test Vulnerability",
        link: "",
        severity: "low",
        explanation: "Test explanation",
      },
    ];

    render(<ExploitList exploits={exploitsWithoutLinks} isLoading={false} />);

    expect(screen.getByText("Test Vulnerability")).toBeInTheDocument();
    expect(screen.queryByText("ðŸ”— View Details")).not.toBeInTheDocument();
  });

  it("handles different severity levels correctly", () => {
    const allSeverityExploits: Exploit[] = [
      {
        title: "Critical Exploit",
        link: "http://example.com",
        severity: "critical",
        explanation: "Critical explanation",
      },
      {
        title: "High Exploit",
        link: "http://example.com",
        severity: "high",
        explanation: "High explanation",
      },
      {
        title: "Medium Exploit",
        link: "http://example.com",
        severity: "medium",
        explanation: "Medium explanation",
      },
      {
        title: "Low Exploit",
        link: "http://example.com",
        severity: "low",
        explanation: "Low explanation",
      },
      {
        title: "Unknown Exploit",
        link: "http://example.com",
        severity: "unknown",
        explanation: "Unknown explanation",
      },
    ];

    render(<ExploitList exploits={allSeverityExploits} isLoading={false} />);

    expect(screen.getByText("CRITICAL")).toHaveClass("text-red-500");
    expect(screen.getByText("HIGH")).toHaveClass("text-orange-500");
    expect(screen.getByText("MEDIUM")).toHaveClass("text-yellow-500");
    expect(screen.getByText("LOW")).toHaveClass("text-green-500");
    expect(screen.getByText("UNKNOWN")).toHaveClass("text-[var(--text-muted)]");
  });

  it("displays hover effects on exploit cards", () => {
    render(<ExploitList exploits={mockExploits} isLoading={false} />);

    const exploitCards = screen
      .getAllByText(/CVE-/)
      .map(title => title.closest(".terminal-border"));

    exploitCards.forEach(card => {
      expect(card).toHaveClass(
        "hover:bg-[var(--background-tertiary)]",
        "transition-colors"
      );
    });
  });

  it("handles single exploit correctly", () => {
    const singleExploit = [mockExploits[0]!];

    render(<ExploitList exploits={singleExploit} isLoading={false} />);

    expect(screen.getByText(singleExploit[0]!.title)).toBeInTheDocument();
    expect(screen.getByText(singleExploit[0]!.explanation)).toBeInTheDocument();
    expect(screen.getByText("CRITICAL")).toBeInTheDocument();
  });
});
