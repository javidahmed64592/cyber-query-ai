[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cyber-query-ai"
version = "1.0.0"
description = "AI-powered cybersecurity assistant for ethical penetration testing and security research."
readme = "README.md"
requires-python = ">=3.12"
license = { file = "LICENSE" }
authors = [
    { name = "Javid Ahmed", email = "javidahmed@icloud.com" }
]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "bleach>=6.2.0",
    "fastapi[standard]",
    "langchain",
    "langchain-ollama",
    "slowapi>=0.1.9",
]

[project.optional-dependencies]
dev = [
    "ruff",
    "mypy",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "tomli",
    "validate-pyproject>=0.24.1",
]

[project.urls]
repository = "https://github.com/javidahmed64592/cyber-query-ai"

[project.scripts]
cyber-query-ai = "cyber_query_ai.main:run"

[tool.hatch.build]
include = [
  "config.json",
  "README.md",
  "SECURITY.md",
  "LICENSE",
  "cyber_query_ai/**",
]

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "--cov",
    "--cov-report",
    "term-missing",
]

[tool.ruff]
target-version = "py312"
line-length = 120
indent-width = 4

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

extend-exclude = [
    "**/__init__.py",
]

[tool.ruff.lint]
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "C4",
    "D",
    "E",
    "EM",
    "F",
    "FBT",
    "G",
    "I",
    "ISC",
    "LOG",
    "N",
    "NPY",
    "PD",
    "PERF",
    "PL",
    "PT",
    "RET",
    "RUF",
    "S",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "D203",
    "D213",
    "G004",
    "PLR0913",
    "S101"
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
warn_unused_configs = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "bleach.*",
    "fastapi.*",
    "langchain.*",
    "langchain-ollama.*",
    "slowapi.*"
]
ignore_missing_imports = true
